/*
	Travelling salesman problem(or TSP)

	Define: Given a list of cities and the distances between each pair of cities, 
	what is the shortest possible route that visits each city and returns to the 
	origin city?(https://en.wikipedia.org/wiki/Travelling_salesman_problem)
*/



#include <iostream>

#include "Common.h"
#include "GA.h"
#include "PSO.h"
#include "ACO.h"

int main(int argc, char** argv) {
	std::vector<Node> nodes1 = {
		{0.4, 0.4439},    {0.2439 ,0.1463}, {0.1707, 0.2293},
		{0.2293 ,0.761},  {0.5171, 0.9414}, {0.8732, 0.6536},
		{0.6878, 0.5219}, {0.8488, 0.3609}, {0.6683, 0.2536},
		{0.6195 ,0.2634}
	};

	std::vector<Node> nodes2 = {
		{41,94},{37,84},{54,67},{25,62},{7,64},{2,99},{68,58},{71,44},{54,62},{83,69},{64,60},{18,54},{22,60},{83,46},
		{91,38},{25,38},{24,42},{58,69},{71,71},{74,78},{87,76},{18,40},{13,40},{82,7},{62,32},{58,35},{45,21},{41,26},
		{44,35},{4,50}
	};

	std::vector<Node> nodes3 = {
		{565.0,575.0},
		{25.0,185.0},
		{345.0,750.0},
		{945.0,685.0},
		{845.0,655.0},
		{880.0,660.0},
		{25.0,230.0},
		{525.0,1000.0},
		{580.0,1175.0},
		{650.0,1130.0},
		{1605.0,620.0},
		{1220.0,580.0},
		{1465.0,200.0},
		{1530.0,5.0},
		{845.0,680.0},
		{725.0,370.0},
		{145.0,665.0},
		{415.0,635.0},
		{510.0,875.0},
		{560.0,365.0},
		{300.0,465.0},
		{520.0,585.0},
		{480.0,415.0},
		{835.0,625.0},
		{975.0,580.0},
		{1215.0,245.0},
		{1320.0,315.0},
		{1250.0,400.0},
		{660.0,180.0},
		{410.0,250.0},
		{420.0,555.0},
		{575.0,665.0},
		{1150.0,1160.0},
		{700.0,580.0},
		{685.0,595.0},
		{685.0,610.0},
		{770.0,610.0},
		{795.0,645.0},
		{720.0,635.0},
		{760.0,650.0},
		{475.0,960.0},
		{95.0,260.0},
		{875.0,920.0},
		{700.0,500.0},
		{555.0,815.0},
		{830.0,485.0},
		{1170.0,65.0},
		{830.0,610.0},
		{605.0,625.0},
		{595.0,360.0},
		{1340.0,725.0},
		{1740.0,245.0} };

	auto graph = std::make_shared<GraphT>(nodes3);
	graph->init();

	/*GA ga(graph, 10000, 90);
	ga.solve();*/

	/*PSO pso(graph, 10000, 90, 1.4, 1.4);
	pso.solve();*/

	ACO aco(graph, 10000, 30, 1, 2, 0.1);
	aco.solve();

	return 0;
}